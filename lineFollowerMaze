#include <Servo.h>                           // Use the Servo library (included with Arduino IDE)  

Servo servoL;                                // Define the left and right servos
Servo servoR;

int delayTimes[] = {7000, 1000, 1000};

bool isDelayFinished = false;
unsigned long timeSinceStart = 0;
int wDetectNum = 0;

bool isSecond = false;

// Perform these steps with the Arduino is first powered on
void setup()
{
  Serial.begin(9600);                        // Set up Arduino Serial Monitor at 9600 baud
  servoL.attach(13);                         // Attach (programmatically connect) servos to pins on Arduino
  servoR.attach(12);

  Serial.begin(9600);
}

// This code repeats indefinitely
void loop()
{

  decisionTree();

}

void decisionTree() {

  DDRD |= B11110000;                         // Set direction of Arduino pins D4-D7 as OUTPUT
  PORTD |= B11110000;                        // Set level of Arduino pins D4-D7 to HIGH
  delayMicroseconds(230);                    // Short delay to allow capacitor charge in QTI module
  DDRD &= B00001111;                         // Set direction of pins D4-D7 as INPUT
  PORTD &= B00001111;                        // Set level of pins D4-D7 to LOW
  delayMicroseconds(230);                    // Short delay
  int pins = PIND;                           // Get values of pins D0-D7
  pins >>= 4;                                // Drop off first four bits of the port; keep only pins D4-D7

  Serial.println(pins, BIN);                 // Display result of D4-D7 pins in Serial Monitor

  // Determine how to steer based on state of the four QTI sensors
  int vL, vR;
  switch (pins)                              // Compare pins to known line following states
  {
    case B1000:
      vL = -100;
      vR = 100;
      break;
    case B1100:
      vL = 0;
      vR = 100;
      break;
    case B0100:
      vL = 50;
      vR = 100;
      break;
    case B0110:
      vL = 100;
      vR = 100;
      break;
    case B0010:
      vL = 100;
      vR = 50;
      break;
    case B0011:
      vL = 100;
      vR = 0;
      break;
    case B0001:
      vL = 100;
      vR = -100;
      break;
    case B1111:
      vL = 100;
      vR = 100;
      break;
    case B0000:
      wDetectNum += 1;
      wCounter(wDetectNum);
      break;

  }

  servoL.writeMicroseconds(1500 + vL);      // Steer robot to recenter it over the line
  servoR.writeMicroseconds(1500 - vR);

  delay(50);
}




void wCounter(int wNum) {
  if (wNum == 1) {                          //turn backwards then right to large black line

    servoL.writeMicroseconds(1350);
    servoR.writeMicroseconds(1650);
    delay(1000);
    servoL.writeMicroseconds(1700);
    servoR.writeMicroseconds(1490);
    delay(1200);
    servoL.writeMicroseconds(1700);
    servoR.writeMicroseconds(1300);
    delay(2300);
    servoL.writeMicroseconds(1470);
    servoR.writeMicroseconds(1700);
    delay(1300);

  { else if (wNum == 2) {                   //turn left if it doesn't lock onto line during turning corners
        servoL.writeMicroseconds(1500);
        servoR.writeMicroseconds(1300);
        delay(2000);

      }
    } else if (wNum == 3) {                // traverse through the white space to reach to end goal
      servoL.writeMicroseconds(1350);
      servoR.writeMicroseconds(1650);
      delay(1000);
      servoL.writeMicroseconds(1700);
      servoR.writeMicroseconds(1490);
      delay(1500);
      servoL.writeMicroseconds(1700);
      servoR.writeMicroseconds(1300);
      delay(800);
      servoL.writeMicroseconds(1700);
      servoR.writeMicroseconds(1500);
      delay(1300);
      servoL.writeMicroseconds(1700);
      servoR.writeMicroseconds(1300);
      delay(3000);
      servoL.writeMicroseconds(1500);
      servoR.writeMicroseconds(1300);
      delay(1500);
      servoL.writeMicroseconds(1700);
      servoR.writeMicroseconds(1300);
      delay(1500);
      servoL.writeMicroseconds(1500);
      servoR.writeMicroseconds(1300);
      delay(1350);
      servoL.writeMicroseconds(1700);
      servoR.writeMicroseconds(1300);
      delay(2950);
      servoL.writeMicroseconds(1700);
      servoR.writeMicroseconds(1500);
      delay(1500);
      servoL.writeMicroseconds(1700);
      servoR.writeMicroseconds(1300);
      delay(1500);
      servoL.writeMicroseconds(1700);
      servoR.writeMicroseconds(1500);
      delay(1350);
      servoL.writeMicroseconds(1700);
      servoR.writeMicroseconds(1300);
      delay(6400);
      servoL.detach();
      servoR.detach();




    }
  }
